#!/usr/bin/env python3
"""
Script pour ex√©cuter les migrations Alembic automatiquement
"""

import sys
import time
from pathlib import Path

from alembic import command
from alembic.config import Config
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

from api.core.config import settings
from api.core.logger import logger


def wait_for_database(max_retries: int = 30, delay: int = 2) -> bool:
    """Attend que la base de donn√©es soit disponible"""
    logger.info("üîÑ Attente de la disponibilit√© de la base de donn√©es...")

    for attempt in range(max_retries):
        try:
            engine = create_engine(settings.DATABASE_URL)
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            logger.info("‚úÖ Base de donn√©es disponible !")
            return True
        except OperationalError as e:
            logger.warning(f"‚è≥ Tentative {attempt + 1}/{max_retries} - Base de donn√©es non disponible: {e}")
            if attempt < max_retries - 1:
                time.sleep(delay)

    logger.error("‚ùå Impossible de se connecter √† la base de donn√©es apr√®s toutes les tentatives")
    return False


def run_migrations() -> bool:
    """Ex√©cute les migrations Alembic"""
    try:
        logger.info("üöÄ Ex√©cution des migrations Alembic...")

        # Configuration d'Alembic
        alembic_cfg = Config(str(Path("migrations", "alembic.ini")))
        alembic_cfg.set_main_option("sqlalchemy.url", settings.DATABASE_URL)

        # V√©rifier si des migrations sont n√©cessaires
        command.check(alembic_cfg)
        logger.info("‚úÖ Base de donn√©es √† jour !")

        # Ex√©cuter les migrations (upgrade to head)
        command.upgrade(alembic_cfg, "head")
        logger.info("‚úÖ Migrations appliqu√©es avec succ√®s !")

        return True

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution des migrations: {e}")
        return False


def main() -> None:
    """Point d'entr√©e principal"""
    logger.info("=== MIGRATIONS ALEMBIC ===")
    logger.info(f"DATABASE_URL: {settings.DATABASE_URL}")

    # Attendre que la base de donn√©es soit disponible
    if not wait_for_database():
        sys.exit(1)

    # Ex√©cuter les migrations
    if not run_migrations():
        sys.exit(1)

    logger.info("‚úÖ Migrations termin√©es avec succ√®s !")


if __name__ == "__main__":
    main()
